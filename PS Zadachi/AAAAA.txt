*USER*
public class User
{
	private string name;

	private string password;

	private UserRolesEnum role;

	private string fakNomer;

	private string email;

	public UserRolesEnum Role
	{
		get { return role; }
		set { role = value; }
	}


	public string Password
	{
		get { return Decrypt(password); }
		set {
				password = Encrypt(value);
				Console.WriteLine(password);
        }
	}


	public string Name
	{
		get { return name; }
		set { name = value; }
	}

	

	public string FakNomer
	{
		get { return fakNomer; }
		set { fakNomer = value; }
	}

	

	public string Email
	{
		get { return email; }
		set { email = value; }
	}

	public string Encrypt(string encr)
	{
		char[] symbols = encr.ToCharArray();
		for (int i = 0; i < encr.Length; i++)
		{
			symbols[i] += (char)Utils.CRYPT_OFFSET_VALUE;
		}

		//using the new string ctor to avoid object being type System.Char[]
		string encrypted = new string(symbols);
		return encrypted;
	}
	public string Decrypt(string crp)
	{
		char[] symbols = crp.ToCharArray();
		for (int i = 0; i < crp.Length; i++)
		{
			symbols[i] -= (char)Utils.CRYPT_OFFSET_VALUE;
		}

		//using the new string ctor to avoid object being type System.Char[]
		string decrypted = new string(symbols);
		return decrypted;
	}
}

*USER ROLES ENUM*
public enum UserRolesEnum
{
	ANONYMOUS, 
	ADMIN, 
	INSPECTOR, 
	PROFESSOR, 
	STUDENT
}

*USER VIEW*
public class UserView
{
	private UserViewModel _viewModel;

    public UserView(UserViewModel viewModel)
    {
		_viewModel = viewModel;
    }

	public void Display()
	{
		Console.WriteLine("Welcome");
		Console.WriteLine($"User: {_viewModel.Name}");
		Console.WriteLine($"Role: {_viewModel.Role}");
        Console.WriteLine($"Pass: {_viewModel.Password}");
    }

	public void DisplayError()
	{
		throw new Exception("Uh-oh! Izpliskahme legena!");
	}
}

**USER VIEW MDOEL***
public class UserViewModel
{
	private User _user;


	public UserViewModel(User user)
	{
		_user = user;
	}

	public UserRolesEnum Role
	{
		get { return _user.Role; }
		set { _user.Role = value; }
	}

	public string Password
	{
		get { return _user.Password;}
		set 
		{
			_user.Password = value;
		}
	}


	public string Name
	{
		get { return _user.Name; }
		set { _user.Name = value; }
	}

	public string Email
	{
		get { return _user.Email; }
		set { _user.Email = value; }
	}

	public string FakNomer
	{
		get { return _user.FakNomer; }
		set { _user.FakNomer = value; }
	}
}

**UTILS** - napravih go samo za edna promenliva ma moje da q slojish v user kato private i do tam
internal class Utils
{
	public const int CRYPT_OFFSET_VALUE = 3;
}